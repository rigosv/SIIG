{% extends 'IndicadoresBundle::standard_layout.html.twig' %}
{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('bundles/gridform/js/jqwidgets/styles/jqx.base.css') }}" type="text/css" media="all" />
    <link rel="stylesheet" href="{{ asset('bundles/gridform/js/jqwidgets/styles/jqx.ui-redmond.css') }}" type="text/css" media="all" />
    <link rel="stylesheet" href="{{ asset('bundles/gridform/css/custom_grid.css') }}" type="text/css" media="all" />
    <link rel="stylesheet" href="{{ asset('bundles/gridform/vendor/animate.min.css') }}" type="text/css" media="all" />
    <style>
        #div_carga {
            position: fixed;
            top:0;
            left:0;
            width:100%;
            height:100%;
            /* Para CSS3 */
            background: rgba(98, 135, 167, .4);
            /* IE8*/
            filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr='#886287a7', endColorstr='#886287a7');
            /* anteriores a IE8 */
            -ms-filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr='#886287a7', endColorstr='#886287a7');

            display:none;
            z-index:10000;
        }
        
        #cargador{
            position:absolute;
            top:50%;
            left: 50%;
            margin-top: -25px;
            margin-left: -25px;
        }
    </style>

{% endblock stylesheets %}
{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxcore.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxdata.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxbuttons.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxscrollbar.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxmenu.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxgrid.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxgrid.sort.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxgrid.pager.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxgrid.selection.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxgrid.edit.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxtabs.js') }}" type="text/javascript"></script>

    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxinput.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxnumberinput.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxcheckbox.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxlistbox.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxdropdownlist.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxswitchbutton.js') }}" type="text/javascript"></script>

    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxgrid.filter.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxgrid.columnsresize.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxscrollbar.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxbuttons.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxcheckbox.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxdropdownlist.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxlistbox.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxmenu.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxcalendar.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxdatetimeinput.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxgrid.aggregates.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxdata.export.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/jqxgrid.export.js') }}" type="text/javascript"></script>
    
    <script src="{{ asset('bundles/gridform/js/parametrosDependencia.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/jqwidgets/globalization/globalize.js') }}" type="text/javascript"></script>

    <script src="{{ asset("bundles/gridform/js/jqwidgets/globalization/globalize.culture.#{app.request.locale}.js") }}" type="text/javascript"></script>

    <script src="{{ asset('bundles/gridform/js/moment/es.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/js/moment/moment.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/indicadores/js/jquery.searchFilter.js') }}" type="text/javascript"></script>
    <script src="{{ asset('bundles/gridform/vendor/bootstrap-notify.min.js') }}" type="text/javascript"></script>
    
    {% block frm %}
    {% if periodoSeleccionado != null and parametros.periodo_estructura != '-1' %}
    {% set titulos = Frm.tituloColumnas | jsonDecode(true) %}
    <script type="text/javascript">
        
        
        $(document).ajaxStart(function(){
            $('#div_carga').show();
        });
        $(document).ajaxComplete(function(){
            $('#div_carga').hide();
        });
        function decimal_date_time(fechaEnms){
            //convertirlo a días
            return fechaEnms / 1000 / 60 / 60 / 24;
        }
        
        function ifX(condicion, valor_true, valor_false){
            return (eval(condicion)) ? valor_true : valor_false;
        }
        
        function now(){
            return moment();
        }
        
        function today(){
            return moment();
        }
        
        $(document).ready(function () {
            $("#FiltroListadoFormularios").searchFilter({targetSelector: ".formulario", charCount: 2});
            $.jqx.theme = 'ui-redmond';
            listSource = [];
            
            var columna = '';
            var valor_celda_actual = '';
            
            {% for Frm in Formularios %}
            var columnaSeleccionada_{{Frm.id}} = '';
            var ultimaFilaFormula_{{Frm.id}} = '';
            var valorCeldaPreEdicion_{{Frm.id}} = '';
            var camposFormulas_{{Frm.id}} = [];
            var reglasValidacion_{{Frm.id}} = [];
            var initGrid{{Frm.id}} = function () {
                var url = Routing.generate('{{url}}', {id: {{Frm.id}}, periodo_ingreso: '{{parametros.periodo_estructura}}',titulo_frm : '{{titulo}}', datos_frm: $('#frm_').serialize() });
                var fila = 0;
                var pk = '{{llave_primaria | default ('codigo_variable')}}'
                
                
                var filasFormulas_{{Frm.id}} = [];
                var operacionesFormulas_{{Frm.id}} = [];
                {% if Frm.calculoFilas != ''%}
                    var camposFormulas_aux_{{Frm.id}} = '{{Frm.calculoFilas}}'.split('::');
                    camposFormulas_aux_{{Frm.id}}.forEach(function(nodo, index){
                            formula = nodo;
                            
                            lados_formula = formula.split(':=');
                            var posicion = lados_formula[0].indexOf('_CHECK');
                            if (posicion != -1){
                                reglasValidacion_{{Frm.id}}.push(nodo);
                            } else {
                                //Separar dos arreglos, con los lados izquierdo y derecho de cada fórmula
                                var LadoIzq = lados_formula[0].toString().replace(/\$\{F|\}/g,'');
                                var LadoDer = lados_formula[1];
                                filasFormulas_{{Frm.id}}.push(LadoIzq.trim());                            
                                operacionesFormulas_{{Frm.id}}.push(LadoDer.trim());
                                camposFormulas_{{Frm.id}}.push(nodo);
                            }
                        });
                {% endif %}

                //Verifica si una fila tiene fórmula de cálculo
                filaFormula_{{Frm.id}} = function(fila, columna){
                    {% if Frm.calculoFilas != '' %}
                        for(i = 0; i < filasFormulas_{{Frm.id}}.length; i++){
                            if (filasFormulas_{{Frm.id}}[i] == fila)
                                return true;
                        }
                    {% endif %}
                    return false;
                }
                var rowbeginedit =  function (row, datafield, columntype, value) {
                    columnaSeleccionada_{{Frm.id}} = datafield;
                    valorCeldaPreEdicion_{{Frm.id}} = value;
                    ultimaFilaFormula_{{Frm.id}} = null;                    
                    var datarow = $("#jqxgrid{{Frm.id}}").jqxGrid('getrowdata', row);
                    
                    var clase = cellclass(row, datafield, value);                    
                    var patt = new RegExp("oculto");
                    if (patt.test(clase))
                        return false;
                    
                    var patt = new RegExp("no_aplica");
                    if (patt.test(clase))
                        return false;
                       
                    //Verificar si es campo calculado
                    {% if Frm.calculoFilas != '' %}
                        return  !(filaFormula_{{Frm.id}}(row, datafield));
                    {% endif %}
                    
                    
                };
                
                var cellclass = function (row, columnfield, value) {
                    var editable = $("#jqxgrid{{Frm.id}}").jqxGrid('getcolumnproperty', columnfield, 'editable');
                    var no_edit_class = (editable == false) ? 'celda_no_editable' : '';
                    var oculto_class = '';
                    var noAplica_class = '';
                    {% if Frm.areaCosteo() == 'calidad' %}
                        var datarowExp = $("#jqxgrid{{Frm.id}}").jqxGrid('getrowdata', 0);
                        var datarowAct = $("#jqxgrid{{Frm.id}}").jqxGrid('getrowdata', row);
                        if (datarowExp.es_poblacion == 'true' && datarowAct.es_poblacion != 'true'){
                            var num_exp = $("#jqxgrid{{Frm.id}}").jqxGrid('getcellvalue',0, columnfield);
                            //oculto_class = (num_exp == '') ? 'oculto': ''
                            
                        }
                        //Verificar si es lógica de salto
                        var posicion = filasFormulas_{{Frm.id}}.indexOf(row+'_LS');
                        if (posicion != -1 && columnfield != 'descripcion_variable'){                            
                            noAplica_class = ( evalLadoDerecho(row, columnfield, value, operacionesFormulas_{{Frm.id}}[posicion], {{Frm.id}}) ) ? '' : 'no_aplica';
                        }
                        
                        if ( noAplica_class == 'no_aplica' && value != '' ){
                            $("#jqxgrid{{Frm.id}}").jqxGrid('setcellvalue', row, columnfield, '');
                        }
                    {% endif %}
                    return no_edit_class + ' ' + oculto_class + ' ' + noAplica_class;
                }

                var error = false;
                // prepare the data
                var source =
                {
                    datatype: "json",
                    updaterow: function (rowid, rowdata, commit) {
                        // synchronize with the server - send update command
                        // call commit with parameter etrue if the synchronization with the server is successful
                        // and with parameter false if the synchronization failder.
                        if (rowdata.es_separador != 'true'){
                            if (rowdata.local == 'si'){
                                rowdata.local = 'no';
                                commit(true);
                            } else {
                                $.post(Routing.generate('{{url_save}}', {id: {{Frm.id}}, periodo_ingreso: '{{parametros.periodo_estructura}}' }),
                                            {datos_frm: $('#frm_').serialize(),
                                                pk: pk,
                                                fila: JSON.stringify(rowdata),
                                                columna : columna,
                                                valor : valor_celda_actual
                                            },
                                function(resp) {
                                    if (resp.estado == 'ok') {
                                        var commit_ = $("#jqxgrid{{Frm.id}}").jqxGrid('updaterow', rowid, resp.data);
                                        commit(true);
                                        error = false;
                                    }
                                    else {
                                        $('#modal_msj_content').html('<div class="alert alert-danger" role="alert">'+resp.msj+'</div>');
                                        $('#modal_msj').modal('show');
                                        commit(false);
                                    }

                                }, 'json')
                                          .fail(function() {
                                            error = true;
                                            commit(false);
                                            $('#modal_msj_content').html('<div class="alert alert-danger" role="alert">{{'_error_conexion_'|trans}}</div>');
                                            $('#modal_msj').modal('show');
                                          })
                                ;
                            }
                        }
                    },
                    datafields: [
                        {% for campo in Frm.campos %}
                            {% if campo.origenPivote %}
                                {% for campoPivote in pivotes[Frm.id][campo.significadoCampo.codigo] %}
                                    {% if tipos_datos_por_filas[Frm.id] %}
                                        { name: '{{campo.significadoCampo.codigo}}_{{campoPivote.id}}', type: 'string' },
                                    {% else %}
                                        { name: '{{campo.significadoCampo.codigo}}_{{campoPivote.id}}', type: '{{campo.tipoDato.codigo}}' },
                                    {% endif %}
                                    {% if campo.origen or campo.significadoCampo.catalogo != '' %}
                                        { name: '{{campo.significadoCampo.codigo}}Source', value: '{{campo.significadoCampo.codigo}}',
                                            values: { source: {{origenes[Frm.id][campo.significadoCampo.codigo]|raw}}, value: 'id', name: 'descripcion' } },
                                    {% endif %}
                                {% endfor %}
                            {% else %}
                                {% if tipos_datos_por_filas[Frm.id] %}
                                        { name: '{{campo.significadoCampo.codigo}}', type: 'string' },
                                    {% else %}
                                        { name: '{{campo.significadoCampo.codigo}}', type: '{{campo.tipoDato.codigo}}' },
                                    {% endif %}
                                {% if campo.origen or campo.significadoCampo.catalogo != '' %}
                                    { name: '{{campo.significadoCampo.codigo}}Source', value: '{{campo.significadoCampo.codigo}}',
                                        values: { source: {{origenes[Frm.id][campo.significadoCampo.codigo]|raw}}, value: 'id', name: 'descripcion' } },
                                {% endif %}
                            {% endif %}
                        {% endfor %}
                        {name: 'es_poblacion'},
                        {name: 'es_separador'},
                        {name: 'nivel_indentacion'},
                        {name: 'codigo_tipo_control'},
                        {name: 'codigo_tipo_dato'},
                        {name: 'ayuda'},
                        {name: 'alertas'},
                        {name: 'rango'},
                        {name: 'origen_fila'}
                    ],
                    url: url,
                    root: 'data'
                };                
                var dataAdapter = new $.jqx.dataAdapter(source);
                $("#jqxgrid{{Frm.id}}").jqxGrid(
                {
                    width: '100%',
                    columnsheight: {% if Frm.gruposColumnas|length > 0 %}'40px'{% else %}'45px'{% endif %},
                    source: dataAdapter,
                    columnsresize: true,
                    editable: {{editable|default(true)}},
                    {% if (Frm.noOrdenarPorFila) %}
                        sortable: false,
                    {% else %}
                        sortable: true,
                    {% endif %}
                    {% if Frm.ajustarAltoFila %}
                        autorowheight: true,
                        autoheight: true,
                    {% endif %}
                    //altrows: true,
                    {% if mostrar_resumen %}
                        showaggregates: true,
                        showstatusbar: true,
                    {% endif %}
                    filterable: true,
                    editmode: 'click',
                    selectionmode: 'multiplecellsadvanced',
                    {% set columnas_fijas = Frm.columnasFijas|default(0) %}
                    columns: [
                        {% if not(Frm.ocultarNumeroFila) %}
                            {
                              text: '#', sortable: false, filterable: false, editable: false,
                              groupable: false, draggable: false, resizable: false,
                              datafield: '', columntype: 'number', width: 50, pinned: true,
                              cellsrenderer: function (row, column, value) {
                                  return "<div style='margin:4px;'>" + (row + 1) + "</div>";
                              }
                            },
                        {% endif %}
                        {% set indice = 0 %}
                        {% for campo in Frm.campos %}
                            {% set indice = indice+1 %}
                            {% if campo.origenPivote %}
                                {% set Pivotes_ =  pivotes[Frm.id][campo.significadoCampo.codigo] %}
                            {% else %}
                                {% set Pivotes_ = [campo] %}
                            {% endif %}

                            {% for pivote in Pivotes_ %}
                            {
                                {% if editable == true %}
                                    {%if (campo.significadoCampo.codigo == 'cant_mensual'
                                            or campo.significadoCampo.codigo == 'importe_mensual'
                                            or campo.significadoCampo.codigo == 'cant_mensual_calidad'
                                            or campo.significadoCampo.codigo == 'mes_check'
                                        )
                                        and campo.origenPivote %}
                                        {% if pivote.id in meses_activos %}
                                            {% set celda_editable = true %}
                                        {% else %}
                                            {% set celda_editable = false %}
                                        {% endif %}
                                    {% else %}
                                        {% set celda_editable = campo.esEditable  %}
                                    {% endif %}
                                {% else %}
                                    {% set celda_editable = false %}
                                {% endif %}
                                {% if campo.origenPivote %}
                                    text: '{{pivote.descripcion}}',
                                    datafield: '{{campo.significadoCampo.codigo}}_{{pivote.id}}',
                                {% else %}
                                    {% if titulos != null and campo.significadoCampo.codigo in titulos|keys%}
                                        text: '{{titulos[campo.significadoCampo.codigo]}}',
                                    {% else %}
                                        text: '{{campo.significadoCampo.descripcion}}',
                                    {% endif %}
                                    datafield: '{{campo.significadoCampo.codigo}}',
                                {% endif %}
                                align: 'center',
                                cellbeginedit: rowbeginedit,
                                width: {{campo.ancho|default(100)}},
                                {% if indice  <=  columnas_fijas %}
                                    pinned: true,
                                {% endif %}
                                cellsalign: '{{campo.alineacion.codigo|default('left')}}',
                                {% if not celda_editable %}
                                    cellclassname: cellclass,
                                {% else %}
                                    cellclassname: cellclass,
                                {% endif%}
                                editable: {{ (celda_editable)? 'true' : 'false' }},

                                hidden: {{campo.oculto|default('false')}},
                                {% if tipos_datos_por_filas[Frm.id] %}
                                    columntype: 'custom',
                                {% else %}
                                    columntype: '{{campo.tipoControl.codigo}}',
                                {% endif %}
                                {% if campo.esCalculado and mostrar_resumen %} aggregates: ['sum'], {% endif %}
                                {% if campo.tipoControl.codigo == 'datetimeinput' %}
                                    cellsformat: 'dd/MMMM/yyyy HH:mm',
                                {% endif %}
                                {% if campo.origen or campo.significadoCampo.catalogo != '' %} displayfield: '{{campo.significadoCampo.codigo}}Source',
                                    createeditor: function (row, value, editor) {
                                        editor.jqxDropDownList({ source: {{origenes[Frm.id][campo.significadoCampo.codigo]|raw}}, displayMember: 'descripcion', valueMember: 'id' });
                                    },
                                {% endif %}
                                {% if campo.grupoColumnas %} columngroup: '{{campo.grupoColumnas.codigo}}', {% endif %}
                                {% if campo.formato %} cellsformat: '{{campo.formato.formato}}', {% endif %}
                                {% if campo.reglaValidacion %}
                                    validation: function (cell, value) {
                                        if ({{campo.reglaValidacion|raw}}) {
                                            return true;
                                        }
                                        return { result: false, message: "{{campo.msjValidacion|default('_dato_no_valido_')|trans}}" };
                                    },
                                {% endif %}
                                {% if campo.formula %}
                                    cellsrenderer: function (index, datafield, value, defaultvalue, column, rowdata) {
                                        {{campo.formula|raw}};
                                        return "<div  class='jqx-{{campo.alineacion.codigo|default('left')}}-align'>" + dataAdapter.formatNumber(result,'{{campo.formato.formato|default('')}}') + "</div>";
                                    },
                                {% endif %}
                                {% if tipos_datos_por_filas[Frm.id] %}
                                    createeditor: function(row, cellValue, editor, cellText, width, height)
                                    {
                                        var datarow = $("#jqxgrid{{Frm.id}}").jqxGrid('getrowdata', row);
                                        var tipo_control = (datarow.codigo_tipo_control == undefined) ?  '{{campo.tipoControl.codigo}}' : datarow.codigo_tipo_control;
                                        if (datarow.es_separador != 'true'){
                                            if (tipo_control == 'checkbox' || tipo_control == 'checkbox_3_states'){                                                
                                                var element_aux = $('<div></div>')                                                
                                                if (tipo_control == 'checkbox_3_states'){
                                                    var element = $('<div tabIndex=0 ></div>');
                                                    editor.append(element);
                                                    element.jqxCheckBox({hasThreeStates: true, animationShowDelay: 0, animationHideDelay: 0});
                                                }
                                                else{
                                                    var element = $('<div tabIndex=0 class="switch_cont" ></div>');
                                                    
                                                    element.jqxSwitchButton({onLabel:'{{'_si_'|trans}}', offLabel:'{{'_no_'|trans}}', width:60, height:25});
                                                    element_aux.append(element);
                                                    editor.append(element);
                                                }
                                            } else if (tipo_control == 'text') {
                                                var inputElement = $("<input type='text' style='width: 100%; height: 100%;' />").prependTo(editor);
                                                inputElement.jqxInput({  width: width, height: height});
                                            } else if (tipo_control == 'date') {
                                                var element = $('<input type="date"></input>');
                                                editor.append(element);
                                                var fecha = (moment(cellValue, "DD/MM/YYYY").isValid()) ? moment(cellValue, "DD/MM/YYYY") : moment();
                                                var control = element.jqxDateTimeInput({value:fecha.toDate(), width: width, height: height, 
                                                    template: "info",
                                                    culture: 'es-SV',
                                                    formatString: 'dd/MM/yyyy',
                                                    showTimeButton: false});
                                            } else if (tipo_control == 'datetimeinput') {
                                                var element = $('<input type="datetime"></input>');
                                                editor.append(element);
                                                var fecha = (moment(cellValue).isValid()) ? moment(cellValue, "DD/MM/YYYY HH:mm") : moment();
                                                element.jqxDateTimeInput({value:fecha.toDate(), width: width, height: height, 
                                                    template: "info",
                                                    culture: 'es-SV',
                                                    formatString: 'dd/MM/yyyy HH:mm',
                                                    showTimeButton: true}); 
                                            } else if (tipo_control == 'time') {
                                                var element = $('<input type="time"></input>');
                                                editor.append(element);
                                                var hora =  cellValue.split(':');
                                                var fecha =  moment({hour: hora[0], minute: hora[1]});
                                                
                                                element.jqxDateTimeInput({value:fecha.toLocaleString('es-SV'), width: width, height: height, 
                                                    template: "info",
                                                    formatString: 'HH:mm', showCalendarButton: false,
                                                    culture: 'es-SV', showTimeButton: true});
                                                
                                            } else if (tipo_control == 'Number' || tipo_control == 'float') {
                                                var inputElement = $("<input type='number' style='width: 100%; height: 100%;' />").prependTo(editor);
                                                var cantDecimales = (tipo_control == 'Number') ? 0 : 2;
                                                inputElement.jqxNumberInput({ inputMode: 'simple', spinMode: 'none', decimalDigits : cantDecimales,  width: width, height: height});
                                            } else if (tipo_control == 'dropdownlist'){
                                                var origenLista = eval(datarow.origen_fila);
                                                //Calcular el mayor ancho de 'label'
                                                var anchoMax = 0;
                                                origenLista.forEach(function(nodo, index){
                                                    anchoMax = (nodo.label.length > anchoMax) ? nodo.label.length : anchoMax;
                                                });
                                                editor.jqxDropDownList({autoDropDownHeight: true,  width: (anchoMax*100/17), height: height, displayMember: "label", valueMember: "value", source:  origenLista });
                                            }
                                        }
                                    },
                                    initeditor : function (row, cellValue, editor, cellText, width, height, pressedkey) {
                                        var datarow = $("#jqxgrid{{Frm.id}}").jqxGrid('getrowdata', row);
                                        var tipo_control = (datarow.codigo_tipo_control == undefined) ?  '{{campo.tipoControl.codigo}}' : datarow.codigo_tipo_control;
                                        if (datarow.es_separador != 'true'){
                                            if (tipo_control == 'checkbox' || tipo_control == 'checkbox_3_states'){
                                                var checkBoxHTMLElement = editor.find('div:first');
                                                //alert(cellValue);
                                                if (tipo_control == 'checkbox_3_states'){
                                                    if (cellValue != undefined){
                                                        if (cellValue.toString() == "true" || cellValue.toString() == "1")
                                                            checkBoxHTMLElement.jqxCheckBox('indeterminate');
                                                        else if (cellValue.toString() == "false" || cellValue.toString() == "0")
                                                            checkBoxHTMLElement.jqxCheckBox({checked: true});
                                                        else
                                                            checkBoxHTMLElement.jqxCheckBox({checked: false});
                                                    } else{
                                                        checkBoxHTMLElement.jqxCheckBox('indeterminate');
                                                    }
                                                } else {
                                                    n_ = (cellValue == undefined) ? true : (cellValue.toString() == "true" || cellValue.toString() == "1") ? false: true;
                                                    checkBoxHTMLElement.jqxSwitchButton({checked: n_});
                                                }
                                                var val = checkBoxHTMLElement.val();
                                                editor.val(val);
                                                $("#jqxgrid{{Frm.id}}").jqxGrid('endcelledit', row, columnaSeleccionada_{{Frm.id}}, false);
                                                
                                            }
                                            else if (tipo_control == 'text'){
                                                var inputField = editor.find('input');
                                                if (pressedkey) {
                                                    inputField.val(pressedkey);
                                                    inputField.jqxInput('selectLast');
                                                }
                                                else {
                                                    inputField.val(cellValue);
                                                    inputField.jqxInput('selectAll');
                                                }
                                            } else if (tipo_control == 'date'){
                                                var dateElement = editor.find('div:first');
                                                var fecha = (moment(cellValue, "DD/MM/YYYY").isValid()) ? moment(cellValue, "DD/MM/YYYY") : moment();
                                                dateElement.jqxDateTimeInput('val', fecha.format("DD/MM/YYYY"));
                                                dateElement.jqxDateTimeInput('open');
                                                dateElement.on('close', function (event) {
                                                    $("#jqxgrid{{Frm.id}}").jqxGrid('endcelledit', row, columnaSeleccionada_{{Frm.id}}, false);
                                                });
                                            } else if (tipo_control == 'datetimeinput'){
                                                var dateElement = editor.find('div:first');
                                                var fecha = (moment(cellValue, "DD/MM/YYYY HH:mm").isValid()) ? moment(cellValue, "DD/MM/YYYY HH:mm") : moment();
                                                dateElement.jqxDateTimeInput('val', fecha.format("DD/MM/YYYY HH:mm"));
                                            } else if (tipo_control == 'time') {
                                                var dateElement = editor.find('div:first');                                                
                                                var hora =  cellValue.split(':');
                                                var fecha =  moment({hour: hora[0], minute: hora[1]});
                                                dateElement.jqxDateTimeInput('val', fecha);
                                                dateElement.jqxDateTimeInput('open');
                                                dateElement.on('close', function (event) {
                                                    $("#jqxgrid{{Frm.id}}").jqxGrid('endcelledit', row, columnaSeleccionada_{{Frm.id}}, false);
                                                });
                                            } else if (tipo_control == 'Number' || tipo_control == 'float') {
                                                var inputField = editor.find('input');
                                                if (pressedkey) {
                                                    inputField.jqxNumberInput('val', pressedkey);
                                                    inputField.jqxNumberInput('selectLast');
                                                }
                                                else {
                                                    inputField.jqxNumberInput('val', cellValue);
                                                    inputField.jqxNumberInput('selectAll');
                                                }
                                            } else if (tipo_control == 'dropdownlist'){
                                                editor.jqxDropDownList('selectItem', cellValue);
                                                editor.jqxDropDownList('open');
                                                editor.on('close', function (event) {
                                                    $("#jqxgrid{{Frm.id}}").jqxGrid('endcelledit', row, columnaSeleccionada_{{Frm.id}}, false);
                                                });
                                            }
                                        }
                                    },
                                    geteditorvalue : function (row, cellValue, editor) {
                                        var datarow = $("#jqxgrid{{Frm.id}}").jqxGrid('getrowdata', row);
                                        var tipo_control = (datarow.codigo_tipo_control == undefined) ?  '{{campo.tipoControl.codigo}}' : datarow.codigo_tipo_control;
                                        
                                        if (datarow.es_separador != 'true'){
                                            if (tipo_control == 'checkbox' || tipo_control == 'checkbox_3_states'){
                                                var checkBoxHTMLElement = editor.find('div:first');
                                                valorNew =  checkBoxHTMLElement.val();
                                            } else if (tipo_control == 'text'){
                                                valorNew  = editor.find('input').val();
                                            } else if (tipo_control == 'date'){
                                                var dateElement = editor.find('div:first');
                                                var date = new Date(dateElement.jqxDateTimeInput('getDate'));
                                                
                                                valorNew = date.getDate() + '/' + (parseInt(date.getMonth())+1) + '/'+ date.getFullYear();
                                            } else if (tipo_control == 'datetimeinput'){
                                                var dateElement = editor.find('div:first');
                                                var date = new Date(dateElement.jqxDateTimeInput('getDate'));
                                                valorNew = date.getDate() + '/' + (parseInt(date.getMonth())+1) + '/'+ date.getFullYear() + ' '+ date.getHours() + ':' + date.getMinutes();
                                            } else if (tipo_control == 'time'){
                                                var dateElement = editor.find('div:first');
                                                var date = new Date(dateElement.jqxDateTimeInput('getDate')).toLocaleString('es-SV');
                                                var partes = date.split(' ');
                                                var partes2 = partes[1].split(':');
                                                hora = (parseInt(partes2[0])<10) ? '0'+partes2[0]: partes2[0];                                                
                                                valorNew = hora+':'+partes2[1];
                                            } else if (tipo_control == 'Number' || tipo_control == 'float'){                                                
                                                valor =  editor.find('input').jqxNumberInput('val');
                                                valorNew = valor.toString().replace(',', '')
                                            } else {
                                                valorNew = editor.val()
                                            }
                                            
                                            var error = false;                                            
                                            reglasValidacion_{{Frm.id}}.forEach(function(nodo, index){
                                                lados_formula = nodo.split(':=');
                                                if (lados_formula[0].trim() == '${F'+row+'}_CHECK'){
                                                    var datos_formula = lados_formula[1].split('//');
                                                    var mensaje = (datos_formula.length == 2 && datos_formula[1].length > 0 ) ? datos_formula[1] : 'Error en el dato ingresado';
                                                    if (!evalLadoDerecho(row, columnaSeleccionada_{{Frm.id}}, valorNew, datos_formula[0], {{Frm.id}}) ){
                                                        mensajeError(mensaje);
                                                        error = true;
                                                    }
                                                }
                                            });
                                            
                                            if (datarow.es_poblacion == 'true' && valorNew != ''){
                                                var veces = 0;
                                                Object.keys(datarow).forEach(function (key) {
                                                    var val = datarow[key];
                                                    veces = (val == valorNew) ? veces + 1 : veces;
                                                });
                                                
                                                if (veces > 1){
                                                    mensajeError('No puede volver a utilizar el valor de '+ valorNew);
                                                    error = true;
                                                }
                                            }
                                            return (error) ? cellValue : valorNew;
                                            
                                        }
                                    },
                                {% endif %}
                                cellsrenderer: function (index, datafield, cellValue, defaultvalue, column, datarow, width, height) {
                                    nivel = (datafield == 'descripcion_variable') ? datarow.nivel_indentacion : 0.3;
                                    estilo = (datarow.es_poblacion == 'true') ? "style='color: blue; margin-left:"+(parseFloat(nivel) * 20)+"px '" :  "style = 'margin-left:"+(parseFloat(nivel) * 20)+"px' ";
                                    clase_poblacion = (datarow.es_poblacion == 'true') ? "poblacion" : "";
                                    var esFormula = filaFormula_{{Frm.id}}(index, datafield);
                                    estilo = (esFormula) ? "style='color: black; font-weight: bold; margin-left:"+(parseFloat(nivel) * 20)+"px '" : estilo;
                                    var tipo_control = (datarow.codigo_tipo_control == undefined) ?  '{{campo.tipoControl.codigo}}' : datarow.codigo_tipo_control;
                                    var valor = cellValue;
                                    // Si es tiempo pasarlo a minutos
                                    if (tipo_control == 'time'){
                                        partes = cellValue.split(':');
                                        valor = parseInt(partes[0]) * 60 + parseInt(partes[1]);
                                    }
                                    if (datarow.alertas != undefined && datarow.alertas != '' && datafield != 'descripcion_variable'){
                                        var rangos = datarow.alertas.split(',');
                                        rangos.forEach(function(nodo, index){
                                            limites = nodo.split('-');
                                            //Si no existe alguno de los límites del rango ponerle valores 
                                            // muy grandes (si falta lim sup) o muy pequeño( si falta el lim inf)
                                            limites[0] = (limites[0]=='') ? -1000000 : limites[0]; 
                                            limites[1] = (limites[1]=='') ? 1000000 : limites[1];
                                            if (!(isNaN(valor))){
                                                if (valor >= parseFloat(limites[0]) && parseFloat(valor) <= parseFloat(limites[1])){                                                    
                                                    estilo = "style='border-style: solid; border-color:"+limites[2]+ " white ; color: " +limites[2]+" ; font-size:14pt; font-weight: bold; margin-left:"+(parseFloat(nivel) * 20)+"px;  overflow: auto; '";
                                                    datarow.rango = limites[2];
                                                }
                                            }
                                        });
                                    }
                                    
                                    if (datarow.es_separador == 'true'){
                                        {% if campo.significadoCampo.codigo  ==  'descripcion_variable' %}
                                            return "<div class='separador_variable jqx-{{campo.alineacion.codigo|default('left')}}-align' "+ estilo + " title='"+datarow.ayuda+"'  data-placement= 'top' >" + cellValue +"</div>";
                                        {% else %}
                                            return "<DIV class= 'separador' style= 'margin-left:"+(parseInt(datarow.nivel_indentacion) * 20)+"px'></DIV>"
                                        {% endif %}
                                    }
                                    {% if tipos_datos_por_filas[Frm.id]  %}
                                        if ( (tipo_control == 'checkbox' || tipo_control == 'checkbox_3_states') && datafield != 'descripcion_variable' ){
                                            var element_aux = $('<div></div>')
                                            if (tipo_control == 'checkbox_3_states'){                                                
                                                if (cellValue.toString() == 'true' || cellValue.toString() == "1")
                                                    estado_ = '<div class="si"><div data-fila="'+index+'" class="sw_etiqueta '+datafield+'">{{'_si_'|trans}}</div><div class="sw_separador"></div></div>';
                                                else if (cellValue.toString() == 'false' || cellValue.toString() == "0")
                                                    estado_ = '<div class="no"><div data-fila="'+index+'" class="sw_separador"></div><div class="sw_etiqueta '+datafield+'">{{'_no_'|trans}}</div></div>';
                                                else 
                                                    estado_ = '<div class="na"><div data-fila="'+index+'" class="sw_etiqueta '+datafield+'">{{'_na_'|trans}}</div></div>';
                                                var element = estado_;
                                            } else{
                                                if (cellValue.toString() == 'true' || cellValue.toString() == "1"){
                                                    estado_ =  '<div class="si"><div data-fila="'+index+'" class="sw_etiqueta '+datafield+'">{{'_si_'|trans}}</div><div class="sw_separador"></div></div>';
                                                } else if (cellValue.toString() == 'false' || cellValue.toString() == "0"){
                                                    estado_ = '<div data-fila="'+index+'" class="no"><div class="sw_separador"></div><div data-fila="'+index+'" class="sw_etiqueta '+datafield+'">{{'_no_'|trans}}</div></div>';
                                                } else {
                                                    estado_ = '<div ><div data-fila="'+index+'" class="sw_separador"></div><div data-fila="'+index+'" class="sw_etiqueta '+datafield+'"></div></div>';
                                                }
                                                var element = estado_;
                                            }
                                            element_aux.append(element);
                                            return element_aux.html();
                                        } else if(tipo_control == 'datetimeinput'){
                                            fecha = moment(cellValue, "DD/MM/YYYY HH:mm");
                                            valorCelda = (fecha.isValid()) ? fecha.format("DD/MM/YYYY HH:mm"): cellValue
                                            return "<div data-fila='"+index+"' class='"+clase_poblacion+" "+datafield+" jqx-{{campo.alineacion.codigo|default('left')}}-align nivel_"+0+"' "+ estilo + " title='"+datarow.ayuda+"'  >" + valorCelda +"</div>";
                                        } else if (tipo_control == 'dropdownlist' && datafield != 'descripcion_variable'){
                                            var origenLista = eval(datarow.origen_fila);
                                            valorEtiqueta =  '';
                                            origenLista.forEach(function(nodo, index){
                                                if (nodo.value == cellValue)
                                                    valorEtiqueta = nodo.label;
                                            });
                                            //return "<div class='jqx-{{campo.alineacion.codigo|default('left')}}-align nivel_"+datarow.nivel_indentacion+"' "+ estilo + " title='"+datarow.ayuda+"'  data-placement= 'top' >" + valorEtiqueta +"</div>";
                                            return "<div data-fila='"+index+"' class='"+clase_poblacion+" "+datafield+" jqx-{{campo.alineacion.codigo|default('left')}}-align nivel_"+0+"' "+ estilo + " title='"+valorEtiqueta+"'  >" + valorEtiqueta.split(' ').join('.') +"</div>";
                                        } else {
                                            valor = (isNaN(cellValue)) ? ((cellValue == 'NaN') ? '' : cellValue) : ( (esFormula) ? parseFloat(cellValue).toFixed(2)  : cellValue);                                            
                                            return "<div data-fila='"+index+"' class='"+clase_poblacion+" "+datafield+" jqx-{{campo.alineacion.codigo|default('left')}}-align nivel_"+0+"' "+ estilo + " title='"+datarow.ayuda+"'  >" + valor +"</div>";
                                        }    
                                    {% else %}
                                        return "<div data-fila='"+index+"' class='jqx-{{campo.alineacion.codigo|default('left')}}-align nivel_"+datarow.nivel_indentacion+"' "+ estilo + " title='"+datarow.ayuda+"'  data-placement= 'top' >" + cellValue +"</div>";
                                    {% endif %}
                                },
                            },
                            {% endfor %}
                        {% endfor %}
                    ],
                    {% set item_count = 0 %}
                    {% for grp in Frm.gruposColumnas %}
                        {% set item_count = item_count+1 %}
                    {% endfor %}
                    {% if item_count > 0 %}
                        columngroups: [
                            {% for grp in Frm.gruposColumnas %}
                                { text: '{{grp.descripcion}}',
                                    align: 'center',
                                    name: '{{grp.codigo}}',
                                    {% if grp.grupoPadre %} parentgroup: '{{grp.grupoPadre.codigo}}', {% endif %}
                                },
                            {% endfor %}
                        ],
                    {% endif %}
                    rendered: function(){
                        $('.jqx-grid-column-header').each(function(i, nodo){
                            $($($(nodo).children()[0]).children()[0]).css('margin-top',0).css('margin-bottom',0);
                        });
                    },
                    ready: function(){                        
                        $("#jqxgrid{{Frm.id}}").jqxGrid('beginupdate');
                        var elemento = $( "div.separador_variable" ).parent().parent();
                        elemento.addClass('fila_separador');
                        $('.selectorColumna').each(function (index, nodo) {
                            var frm = $(this).attr('data-form');
                            if (index == 0 ){
                                $(nodo).iCheck('check'); 
                                $("#jqxgrid"+frm).jqxGrid('showcolumn', $(nodo).val());
                            } else {
                                $("#jqxgrid"+frm).jqxGrid('hidecolumn', $(nodo).val());
                            }
                        });
                        $("#jqxgrid{{Frm.id}}").jqxGrid('endupdate');
                    }
                });

                var listSource = [
                    {% for campo in Frm.campos %}
                        {% if campo.origenPivote %}
                            {% for campoPivote in pivotes[Frm.id][campo.significadoCampo.codigo] %}
                                { label: '{{campoPivote.descripcion}}', value: '{{campo.significadoCampo.codigo}}_{{campoPivote.id}}', checked: false },
                            {% endfor %}
                        {% else %}
                            {% if not(campo.oculto) %}
                                { label: '{{campo.significadoCampo.descripcion}}', value: '{{campo.significadoCampo.codigo}}', checked: false },
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                    ];

                    {% if Frm.calculoFilas != '' %}
                    
                    $("#jqxgrid{{Frm.id}}").bind('cellendedit', function (event) {
                        var fila = event.args.rowindex;
                        columna = event.args.datafield;
                        valor_celda_actual = event.args.value;
                        
                        //Evitar que entre en bucle infinito
                        if (ultimaFilaFormula_{{Frm.id}} == fila) return;
                        
                        
                        var operaciones = '';
                        var datarow = $("#jqxgrid{{Frm.id}}").jqxGrid('getrowdata', fila);
                        
                        var tipo_control = datarow.codigo_tipo_control;
                        if (tipo_control != 'descripcion_variable'){
                            var campos = camposFormulas_{{Frm.id}};
                            var formula = [];
                            
                            //se espera el formato codigoColumna: {F2} := {F0}/{F1} * 100
                            // Primero se separa por : para obtener el nombre de la columna y la formula
                            // Luego se separa por = para obtener los dos lados de la ecuación
                            // Luego se sustituyen los valores por el dato de la fila correspondiente
                            // y se hace el cálculo 
                            campos.forEach(function(nodo, index){
                                formula = nodo.split(':=');
                                //Procesar solamente las fórmulas donde la celda actual aparece
                                if (formula[1].toString().indexOf('{F'+fila+'}') != -1){
                                    filasp = /\$\{F[0-9]{1,4}\}/g;

                                    var fila_destino = filasp.exec(formula[0]).toString().replace(/\$\{F|\}/gi,'');
                                    var datarow_dest = $("#jqxgrid{{Frm.id}}").jqxGrid('getrowdata', fila_destino);
                                    
                                    if (datarow_dest != undefined) {
                                        var resultado = calcularCelda(fila, columna, valor_celda_actual, nodo, {{Frm.id}});
                                         
                                        ultimaFilaFormula_{{Frm.id}} = fila;
                                        
                                        $("#jqxgrid{{Frm.id}}").jqxGrid('setcellvalue', fila_destino, columna, resultado);
                                    }
                                }
                            });
                        }
                    });

                    {% endif %}


                    {% if cantidad_formularios == 1 %}
                        $("#jqxlistbox").jqxListBox({ source: listSource, width: 500, height: 400,  checkboxes: true });
                        $("#jqxlistbox").on('checkChange', function (event) {
                            $("#jqxgrid{{Formularios[0].id}}").jqxGrid('beginupdate');
                            if (event.args.checked) {
                                $("#jqxgrid{{Formularios[0].id}}").jqxGrid('showcolumn', event.args.value);
                            }
                            else {
                                $("#jqxgrid{{Formularios[0].id}}").jqxGrid('hidecolumn', event.args.value);
                            }
                            $("#jqxgrid{{Formularios[0].id}}").jqxGrid('endupdate');
                        });
                    {% endif %}
            }
            {% endfor %}

            
            {% if cantidad_formularios == 1 %}
                initGrid{{Formularios[0].id}}()
                $("#exportar").click(function () {
                    $("#jqxgrid{{Formularios[0].id}}").jqxGrid('exportdata', 'xls', 'jqxGrid');
                });
                $("#clear").click(function () {
                    $("#jqxgrid{{Formularios[0].id}}").jqxGrid('clear');
                    //$('#mensaje').html('');
                });
            {% elseif cantidad_formularios > 1 %}
                // init widgets.
                var initWidgets = function (tab) {
                    switch (tab) {
                        {% for Frm in Formularios%}
                        case {{ loop.index0 }}:
                            initGrid{{Frm.id}}();
                            break;
                            {% endfor %}
                    }
                }
                $('#jqxTabs').jqxTabs({ width: '100%', height: 560,  initTabContent: initWidgets, theme: 'summer' });
            {% endif %}
            
            $("#guardar").click(function () {
                if (error){
                    $('#modal_msj_content').html('<div class="alert alert-warning" role="alert">{{'_error_anterior_'|trans}}</div>');
                    $('#modal_msj').modal('show');
                }
                else {
                    $('#modal_msj_content').html('<div class="alert alert-success" role="alert">{{'_datos_guardados_'|trans}}</div>');
                    $('#modal_msj').modal('show');
                }
            });            
            {% if periodoSeleccionado.formulario.periodoLecturaDatos == 'mensual' %}
                var f = $("#fechaEvaluacion").val();
                var fecha = (moment(f, "DD/MM/YYYY").isValid()) ? moment(f, "DD/MM/YYYY") : moment();
                $("#fechaEvaluacion").jqxDateTimeInput({ value:fecha.toDate(), width: '200px', height: '25px', culture: 'es-SV' , formatString: 'dd/MM/yyyy'});
            {% endif%}
            $("#guardarConf").click(function () {
                if (validarFrmConf()){
                    var fechaEval = '';
                    {% if periodoSeleccionado.formulario.periodoLecturaDatos == 'mensual' %}
                        fechaEval = 'fecha_evaluacion='+$('#fechaEvaluacion').val()+'&';
                    {% endif %}
                    $.post(Routing.generate('guardar_encabezado', {periodo_ingreso: '{{parametros.periodo_estructura}}' }),
                                            {datos_frm: fechaEval+$('#frmConf').serialize()},
                                function(resp) {
                                }, 'json'
                           );
                   //Recalcular las celdas que se calculan a partir de fecha de evaluación
                   {% for Frm in Formularios %}
                        var campos = camposFormulas_{{Frm.id}};
                        var filasp = /\$\{F[0-9]{1,4}\}/g;
                        campos.forEach(function(nodo, index){
                            if (nodo.toString().indexOf('${fecha_medicion}') != -1){
                                //Obtener todas las columnas del formulario
                                var cols = $("#jqxgrid{{Frm.id}}").jqxGrid("columns");
                                for (var i = 0; i < cols.records.length; i++) {
                                    if (cols.records[i].datafield != 'codigo_variable' && cols.records[i].datafield != 'descripcion_variable'){
                                        var columna = cols.records[i].datafield;
                                        
                                        formula = nodo.split(':=');
                                        //Como no se está recalculando por la edición de una celda, se pone
                                        // valores arbitrarios de fila=-3 y valor_celda_actual = 0
                                        var resultado = calcularCelda(-3, columna, 0, nodo, {{Frm.id}});
                                        var fila_destino = formula[0].toString().replace(/\$\{F|\}/gi,'');

                                        $("#jqxgrid{{Frm.id}}").jqxGrid('setcellvalue', fila_destino, columna, resultado);
                                    }
                                }
                            }
                        });
                   {% endfor %}
                   $('#myModalConf').modal('toggle');
                } else {
                    $('#myModalConf').modal('show');
                }
            });
            
            $('#myModalConf').on('hidden.bs.modal', function (e) {
                if (!validarFrmConf()){
                    $('#myModalConf').modal('show');
                }               
            });
            
            var evalLadoDerecho = function (fila, columna, valor_celda_actual, operaciones, idFrm){
                
                operadores = operaciones.toString().match(/\$\{F[0-9]{1,4}\}/g);
                if (operadores != null && operadores.length > 0){
                    operadores.forEach(function(nodo2, index){
                        fil = nodo2.toString().replace(/\$\{F|\}/gi,'');
                        valor_oper = (fil == fila) ? valor_celda_actual :  $('#jqxgrid'+idFrm).jqxGrid('getcellvalue', fil, columna);
                        valor_oper  = (valor_oper == '') ? false : valor_oper;

                        var datarow_celda = $("#jqxgrid"+idFrm).jqxGrid('getrowdata', fil);
                        if (datarow_celda.codigo_tipo_control == 'time'){
                            hora =  valor_oper.split(':');
                            valor_oper =  parseInt(hora[0]) * 60 + parseInt(hora[1]);
                        } else if (datarow_celda.codigo_tipo_control == 'datetimeinput'){
                            fecha = moment(valor_oper, "DD/MM/YYYY HH:mm")
                            //valor de la fecha en milisegundos
                            valor_oper =  fecha.valueOf();
                        } else if (datarow_celda.codigo_tipo_control == 'date'){
                            fecha = moment(valor_oper, "DD/MM/YYYY")
                            //valor de la fecha en milisegundos
                            valor_oper =  fecha.valueOf();
                        }
                        operaciones = operaciones.replace(nodo2.toString(), valor_oper);
                    });
                }
                try {
                    operaciones = operaciones.replace(/amp;/g, '')
                            .replace(/&#039;/g, "'")
                            .replace(/&lt;/g, '<')
                            .replace(/&gt;/g, '>')
                            .replace(/ and /g, ' && ')
                            .replace(/ or /g, ' || ')
                            .replace(/\$\{fecha_medicion\}/g, moment($('#fechaEvaluacion').val(), 'DD/MM/YYYY').valueOf())
                            .replace(/decimal-date-time/g, 'decimal_date_time')
                            .replace(/=/g, '==')
                            .replace(/====/g, '==')
                            .replace(/:==/g, ':=')
                            .replace(/>==/g, '>=')
                            .replace(/<==/g, '<=')
                            ; 

                    var result =  eval(operaciones);
                    return result;
                }                        
                catch(err) {
                    return;
                }
            }
            
            //Calcula el resultado de una fórmula
            // y lo almacena en la celda destino
            function calcularCelda( fila, columna, valor_celda_actual, formula, frmId){
                
                var filasp = /\$\{F[0-9]{1,4}\}/g;
                var lados_formula = formula.split(':=');
                var fila_destino = filasp.exec(lados_formula[0]).toString().replace(/\$\{F|\}/gi,'');
                
                var operaciones = lados_formula[1];

                var result = evalLadoDerecho(fila, columna, valor_celda_actual, operaciones, frmId);
                
                //Convertir el valor de acuerdo al tipo de dato de la celda destino
                var datarow_dest = $("#jqxgrid"+frmId).jqxGrid('getrowdata', fila_destino);
                
                if (datarow_dest.codigo_tipo_control == 'datetimeinput' || 
                            datarow_dest.codigo_tipo_control == 'time'){
                    //El resultado está en milisegundos, pasarlo a formato hora:minutos
                    var horas_ = result / 1000 / 60 / 60 ;
                    horas = ~~(horas_);
                    horas = ( horas >=0 && horas < 10 ) ? '0'+horas : horas;

                    var minutos = parseInt((horas_ - horas) * 60);
                    minutos = ( minutos >= 0 && minutos < 10 ) ? '0'+Math.abs(minutos) : Math.abs(minutos);
                    result =  horas+ ':' + minutos;
                } else if (datarow_dest.codigo_tipo_control == 'float'){ 
                    result = result.toFixed(2);
                } else if (datarow_dest.codigo_tipo_control == 'Number'){ 
                    result = result.toFixed(0);
                }

                var valor;                
                if ( lados_formula[0].replace(/\$\{F|\}/g,'').trim() == fila_destino+'_LS'){                    
                    valor = (result) ? (datarow_dest.codigo_tipo_control == 'checkbox' || datarow_dest.codigo_tipo_control == 'checkbox_3_states') ? false : null : ''; 
                }else if ( lados_formula[0].replace(/\$\{F|\}/g,'').trim() == fila_destino+'_LSX'){
                    valor = result; 
                }
                else{
                    valor = result;
                }
                
                return valor;
            }
            
            function mensajeError(mensaje){
                $.notify({
                    message: mensaje 
                },{
                    animate: {
                        enter: 'animated jello'
                    },
                    type: 'danger',
                    z_index: 5031
                });
            }
            function validarFrmConf(){
                var msj = '';
                {% if periodoSeleccionado.formulario.periodoLecturaDatos == 'mensual' %}
                    if ($('#nombreResponsable').val().trim() === '')
                        msj = 'Ingrese el nombre del responsable de la evaluación';
                {% endif %}
                if (msj === ''){
                    $('#msjConf').html('');
                    return true;
                }
                else{
                    $('#msjConf').html('<div class="alert alert-danger" role="alert">'+msj+'</div>');
                    return false;
                }                
            }
            
            if (!validarFrmConf()){
                $('#msjConf').html('');
                $('#myModalConf').modal('show');
            }
            
            $('.selectorColumna').on('ifClicked', function (event) {
                if ( ! $(this).is(':checked') ){
                    var frm = $(this).attr('data-form');
                    var Grid = $("#contentjqxgrid"+frm);
                    //Control checheado actualmente
                    var ant = $('.selectorColumna[data-form="'+frm+'"]:checked'); 
                    
                    //Verificar que no tenga celdas vacías
                    var celdas = Grid.find(" .jqx-grid-cell:not('.oculto'):not('.celda_no_editable'):not('.no_aplica') ."+ant.val());
                    var no_completado;
                    var criterio = '';
                    celdas.each(function(index, item){                        
                        if ($(item).html().trim() == ''){
                            no_completado = true;
                            
                            criterio = (criterio == '') ? $('.descripcion_variable[data-fila="'+$(item).attr('data-fila')+'"]').html() : criterio;
                        }                        
                    });
                    

                    if (no_completado) {
                        $('#msj').html('<div class="alert alert-danger" role="alert">Complete el criterio: '+criterio+'</div>');
                        $('#msjModal').modal('show');
                        
                        event.stopPropagation();
                        
                        setTimeout(function() {
                            ant.iCheck('check');
                            $(this).iCheck('uncheck');
                        }, 100);
                        
                        
                    } else {
                        $("#jqxgrid"+frm).jqxGrid('hidecolumn', ant.val());
                        $("#jqxgrid"+frm).jqxGrid('showcolumn', $(this).val());
                    }
                }
            });
            
        });
        
        
    </script>
    {% else %}
        <script type="text/javascript">
            $(document).ready(function () {
                //$('[data-toggle="popover"]').popover('show');
                $('#ModalParametros').modal('toggle')
                $("#FiltroListadoFormularios").searchFilter({targetSelector: ".formulario", charCount: 2});
            });
        </script>
    {% endif %}
    {% endblock frm %}
{% endblock javascripts %}
{% block content %}
    <form id="frm_" class="form-inline" >
        <div class="panel panel-primary">
            <div class="panel-heading">
                {% block frm_head %}
                    <DIV class="row">
                        <DIV class="col-sm-6">
                            {% block frm_opciones %}{% endblock %}
                        </div>
                        <div class="col-sm-6">
                            <DIV style="width: 98%; text-align: right" class="prueba">
                                <button type="button" class="btn btn-success" data-toggle="modal" data-target="#ModalParametros">
                                    <span class="glyphicon glyphicon-repeat" aria-hidden="true"></span>{{'_cargar_formulario_'|trans}}
                                </button>
                                
                                <button class="btn btn-warning" type="button" name="guardar" id="guardar" ><i class="fa fa-save" data-original-title="" title=""></i>{{'_guardar_'|trans}}</button>
                                {% if periodoSeleccionado != null and parametros.periodo_estructura != '-1' %}
                                    {% if Formularios[0].areaCosteo() == 'calidad' %}
                                        <button class="btn btn-default" type="button" name="configurar" id="configurar" data-toggle="modal" data-target="#myModalConf" >
                                            <span class="glyphicon glyphicon-cog" aria-hidden="true">{{'_conf_'|trans}}</span>
                                        </button>
                                    {% endif %}
                                {% endif %}
                                <button class="btn btn-instagram" type="button" name="exportar" id="exportar" ><i class="fa fa-archive" data-original-title="" title=""></i>{{'_exportar_'|trans}}</button>
                                {% if periodoSeleccionado != null and parametros.periodo_estructura != '-1' and Frm.rutaManualUso != '' %}
                                    <a href="Frm.rutaManualUso" TARGET="_blank" class="btn btn-info" role="button"><i class="fa fa-question-circle" data-original-title="" title=""></i>{{'_manual_uso_'|trans}}</a>
                                {% endif %}
                                <DIV id="mensaje"></div>
                            </div>
                        </div>
                    </div>
                    <DIV class="descripcion_frm">
                        {% if Frm is defined %}{{Frm.descripcion}}{% endif %}
                    </DIV>
                {% endblock frm_head %}
            </div>
            <div class="panel-body">
                {% block grid %}
                    <div id='jqxWidget' style="padding: 10px;">
                        {% if cantidad_formularios == 1 %}
                        <div role="tabpanel">
                            {% if Formularios[0].areaCosteo() == 'calidad' and Formularios[0].formaEvaluacion() == 'lista_chequeo' %}
                                <ul class="nav nav-tabs" role="tablist">
                                    <li role="presentation" class="active"><a href="#contenedor-jqxgrid{{Formularios[0].id}}" role="tab" data-toggle="tab">{{'_cuadro_datos_'|trans}}</a></li>
                                </ul>
                                <div class="tab-content">
                                    <DIV role="tabpanel" id="contenedor-jqxgrid{{Formularios[0].id}}" class="tab-pane active">
                                        {{ include('GridFormBundle:Formulario:selectoresColumnas.html.twig', {'Frm':Formularios[0],'pivotes':pivotes}) }}
                                        <div id="jqxgrid{{Formularios[0].id}}" ></div>
                                    </DIV>
                                    <div role="tabpanel" class="tab-pane" id="jqxlistbox"></div>
                                </div>                            
                            {% else %}
                                <ul class="nav nav-tabs" role="tablist">
                                    <li role="presentation" class="active"><a href="#jqxgrid{{Formularios[0].id}}" role="tab" data-toggle="tab">{{'_cuadro_datos_'|trans}}</a></li>
                                    <li role="presentation"><a href="#jqxlistbox" aria-controls="profile" role="tab" data-toggle="tab">{{'_columnas_'|trans}}</a></li>
                                </ul>
                                <div class="tab-content">
                                    <div id="jqxgrid{{Formularios[0].id}}" role="tabpanel" class="tab-pane active"></div>
                                    <div role="tabpanel" class="tab-pane" id="jqxlistbox"></div>
                                </div>
                            {% endif %}
                        </div>
                        {% elseif cantidad_formularios > 1%}
                        <div id='jqxTabs'>
                            <ul>
                            {% for Frm in Formularios %}
                                <li title="{{Frm.descripcion|default(Frm.id)}}">
                                    {{Frm.descripcion|default(Frm.id)|truncate(60)}}
                                </li>
                            {% endfor %}
                            </ul>
                            {% for Frm in Formularios %}
                                <div style="overflow: hidden;">
                                    {{ include('GridFormBundle:Formulario:selectoresColumnas.html.twig', {'Frm':Frm,'pivotes':pivotes}) }}
                                    <div style="border:none;" id="jqxgrid{{Frm.id}}"></div>
                                </div>
                            {% endfor %}
                        </div>
                        {% endif %}
                    </div>
                {% endblock %}
            </div>
        </div>
        {% block frm_foot %} {% endblock frm_foot %}
        <input type="hidden" name="col" id='col' />
        <input type="hidden" name="fil" id='fil' />
    </form>
    <div class="modal fade bs-example-modal-sm" tabindex="-1" role="dialog" id='modal_msj' aria-labelledby="mySmallModalLabel">
        <div class="modal-dialog modal-sm">
            <div class="modal-content" id="modal_msj_content"></div>
        </div>
    </div>
    <div class="modal fade bs-example-modal-sm" tabindex="-1" data-backdrop="true" data-keyboard= 'true' id='modal_msj_solo_fondo' aria-labelledby="mySmallModalLabel">
        <div class="modal-dialog modal-sm">
            <div class="modal-content"></div>
        </div>
    </div>
    
    <div class="modal fade" id="myModalConf" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
              <h4 class="modal-title" id="myModalLabel" style="color: white; font-weight: bold;">{{'_configuracion_'|trans}}</h4>
            </div>
            <div class="modal-body">
                <DIV id="msjConf"></div>
                <form id="frmConf">
                    {% if periodoSeleccionado != null and periodoSeleccionado.formulario.periodoLecturaDatos == 'mensual' %}
                        <div class="form-group">
                          <label for="fechaEvaluacion">{{'_fecha_evaluacion_'|trans}}</label>
                          <input name="fechaEvaluacion" class="form-control" id="fechaEvaluacion" 
                                 {% if encabezado.fecha_evaluacion is defined and encabezado.fecha_evaluacion != '' %} 
                                     value="{{encabezado.fecha_evaluacion}}"
                                {% endif %}
                            />
                        </div>
                        <div class="form-group">
                          <label for="nombreResponsable">{{'_nombre_responsable_evaluacion_'|trans}}</label>
                          <input name='responsable' type="text" class="form-control" id="nombreResponsable" 
                                 value="{% if encabezado.responsable is defined %} {{encabezado.responsable}}{% endif %}" />
                        </div>
                    {% endif %}
                    <div class="form-group">
                        <label for="observaciones">{{'_observaciones_'|trans}}</label>
                        <textarea name="observaciones" class="form-control" id="observaciones">{% if encabezado.observaciones is defined %}{{encabezado.observaciones}}{% endif %}</textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" id='guardarConf' class="btn btn-primary">{{'_guardar_'|trans}}</button>
            </div>
          </div>
        </div>
    </div>
    
    <!-- mensajitos de alerta -->    
    <div class="modal modal-alert fade bs-example-modal-sm" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" id="msjModal" >
        <div class="modal-dialog modal-sm" >
            <div class="modal-content" >
              <div class="modal-header" >
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="msj"></h4>
              </div>              
            </div>
        </div>
    </div>
    <div id="div_carga" class='affix'>
        <img id="cargador" src="{{ app.request.schemeAndHttpHost ~ asset('bundles/indicadores/images/ajax-loader.gif') }}"/>
    </div>
{% endblock content %}
